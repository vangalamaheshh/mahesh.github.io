---
layout: post
title:  "Real Time Data Processing using Apache Kafka"
date:   2022-01-06
categories: Blog Data-Engineering Big-Data Apache-Kafka  
---

Real time data processing is the most sought after skill now a days. And Apache Kafka is the clear front runner in processing data streams at scale and has been battle tested at corporate giants such as Netflix, Uber to name a few.

In this post, I wanted to share how we can read twitter real time tweet stream via a `Kafka Producer` into a `Kafka Stream (a.k.a Topic)` and in turn read by `Kafka Consumer`. Though, the current workflow seems trivial, it demonstrates the Kafka's profound usecase of `publish-subscribe` model. One can envision a scenario where we can have multiple consumers consuming the same data elements in parallel, processing the down stream business logic in a fault tolerance fashion.

With no further ado, let's get into action. But, first thing first, we need to fire up the `Kafka` environment on our local workstation to explore `Kafka's fundamentals`.

Kafka Installation using Compose
=================================

docker-compose.yaml

{% highlight docker %}
version: "3.3"
services:
  
  kafka-client:
    container_name: kafka-client
    image: docker.io/mvangala/kafka-client:latest
    command: ["tail", "-f", "/dev/null"]
    depends_on:
      - kafka
    links:
      - "kafka:kafka"
    environment:
      - KAFKA_PORT=9092

  zookeeper:
    container_name: zookeeper
    image: docker.io/wurstmeister/zookeeper:latest
    ports:
      - "2181:2181"

  kafka:
    container_name: kafka
    image: docker.io/wurstmeister/kafka:latest
    ports:
      - "9092:9092"
    depends_on:
      - "zookeeper"
    links:
      - "zookeeper:zookeeper"
    environment:
      - KAFKA_ADVERTISED_HOST_NAME=kafka
      - KAFKA_ZOOKEEPER_CONNECT=zookeeper:2181
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock

{% endhighlight %}

Save the above contents as `docker-compose.yaml` and run

{% highlight docker %}
docker-compose -f docker-compose.yaml up -d
# this will bring up zookeeper, kafka and kafka-client containers
{% endhighlight %}

Let's explore `Kafka's basics` by logging onto `kafka container`.

{% highlight docker %}
docker exec -it kafka bash
# this will launch you into kafka container
kafka-topics.sh --create --topic twitter-tweets --partitions=4 --zookeeper zookeeper --replication-factor 1
# this creates a kafka-topic
kafka-console-producer.sh --topic=twitter-tweets --bootstrap-server=kafka:9092
# with this kafka-producer, you can start pushing data onto kafka-topic you created
{% endhighlight %}

Now, open another terminal to launch a `Kafka Consumer` so that we can consume the data off of the `Kafka Topic` we have created.

{% highlight docker %}
docker exec -it kafka bash
# this will launch you into kafka container
kafka-console-consumer.sh --topic=twitter-tweets --bootstrap-server=kafka:9092
# this consumer can now read messages off of twitter-tweets topic in real time
{% endhighlight %}
 
Now type, let's say the proverbial `hello world` phrase via `kafka-producer` we opened in the first terminal window. And this message magically appears in the `kafka-consumer` window you opened. 

![producer-consumer](/assets/images/kafka-pub-sub.png)

Now that we have seen publish-subscribe model in action, let's do this with real time twitter data.

You will need to create,
- `Twitter Developer Account` at https://developer.twitter.com. 
- an app with oauth2 client credentials.
- copy `key` into `api.key` file and `secret` into `api.secret` file.
- finally, upgrade your account (it's free) to have `elevated` access to `Twitter API`, so that you can read the tweets in bulk.

Now log onto `kafka-client container` using,

{% highlight docker %}
docker exec -it kafka-client bash
# this will launch you into kafka-client container
cd /mnt
# this changes to /mnt directory 
{% endhighlight %}

get_tweets.py

{% highlight python %}
import tweepy
from kafka import KafkaProducer
from os import environ as ENV
import sys
import time

kafka_port = ENV.get('KAFKA_PORT', 9092)
kafka_producer = KafkaProducer(bootstrap_servers = 'kafka' + ':' + kafka_port)
kafka_topic = "twitter-tweets"

twitter_key = b'<PASTE YOUR api.key HERE>'
twitter_secret = b'<PASTE YOUR api.secret HERE>'
twitter_auth = tweepy.AppAuthHandler(twitter_key, twitter_secret)
twitter_client = tweepy.API(twitter_auth)

for tweet in tweepy.Cursor(twitter_client.search_tweets, q = 'firstworldproblems').items(10):
  kafka_producer.send(kafka_topic, str.encode(tweet.text))
  time.sleep(5) # wait for 5 seconds

sys.exit(0)
{% endhighlight %}

When you run the script, you will notice the real time tweets show up in your consumer. So, that's a wrap ... for now!!

Happy Coding!! :+1:

<a href="https://www.buymeacoffee.com/MaheshVangala" target="_blank"><img src="https://cdn.buymeacoffee.com/buttons/default-orange.png" alt="Buy Me A Coffee" height="41" width="174"></a>

<div id="share-bar">

    <h4 class="share-heading">Liked it? Please share the post.</h4>

    <div class="share-buttons">
        <a class="horizontal-share-buttons" target="_blank" href="https://www.facebook.com/sharer/sharer.php?u=https://vangalamaheshh.github.io{{page.url}}" 
            onclick="gtag('event', 'Facebook', {'event_category':'Post Shared','event_label':'Facebook'}); window.open(this.href, 'pop-up', 'left=20,top=20,width=500,height=500,toolbar=1,resizable=0'); return false;"
            title="Share on Facebook" >
            <span class="icon-facebook2">Facebook</span>
        </a>
        <a  class="horizontal-share-buttons" target="_blank" href="https://twitter.com/intent/tweet?text=Real Time Data Processing using Apache Kafka&url=https://vangalamaheshh.github.io{{page.url}}"
            onclick="gtag('event', 'Twitter', {'event_category':'Post Shared','event_label':'Twitter'}); window.open(this.href, 'pop-up', 'left=20,top=20,width=500,height=500,toolbar=1,resizable=0'); return false;"
            title="Share on Twitter" >
            <span class="icon-twitter">Twitter</span>
        </a>
        <a  class="horizontal-share-buttons" target="_blank" href="http://www.reddit.com/submit?url=https://vangalamaheshh.github.io{{page.url}}"
          onclick="gtag('event', 'Reddit', {'event_category':'Post Shared','event_label':'Reddit'}); window.open(this.href, 'pop-up', 'left=20,top=20,width=900,height=500,toolbar=1,resizable=0'); return false;"
          title="Share on Reddit" >
          <span class="icon-reddit">Reddit</span>
        </a>
        <a  class="horizontal-share-buttons" target="_blank" href="https://www.linkedin.com/shareArticle?mini=true&url=https://vangalamaheshh.github.io{{page.url}}"
          onclick="gtag('event', 'LinkedIn', {'event_category':'Post Shared','event_label':'LinkedIn'}); window.open(this.href, 'pop-up', 'left=20,top=20,width=500,height=500,toolbar=1,resizable=0'); return false;"
          title="Share on LinkedIn" >
          <span class="icon-linkedin">LinkedIn</span>
        </a>
    </div>

</div>
<style type="text/css">
/* Share Bar */
#share-bar {
    font-size: 20px;
    border: 3px solid #7de77b;
    border-radius: 0.3em;
    padding: 0.3em;
    background: rgba(125,231,123,.21)
}

.share-heading {
    margin-top: 0px;
}

/* Title */
#share-bar h4 {
    margin-bottom: 10px;
    font-weight: 500;
}

/* All buttons */
.share-buttons {
}

.horizontal-share-buttons {
    border: 1px solid #928b8b;
    border-radius: 0.2em;
    padding: 0.2em;
    margin-right: 0.2em;
    line-height: 2em;
}

/* Each button */
.share-button {
    margin: 0px;
    margin-bottom: 10px;
    margin-right: 3px;
    border: 1px solid #D3D6D2;
    padding: 5px 10px 5px 10px;
}
.share-button:hover {
    opacity: 1;
    color: #ffffff;
}

/* Facebook button */
.icon-facebook2 {
    color: #3b5998;
}

.icon-facebook2:hover {
    background-color: #3b5998;
    color: white;
}

/* Twitter button */
.icon-twitter {
    color: #55acee;
}
.icon-twitter:hover {
    background-color: #55acee;
    color: white;
}

/* Reddit button */
.icon-reddit {
    color: #ff4500;
}
.icon-reddit:hover {
    background-color: #ff4500;
    color: white;
}

/* Hackernews button */
.icon-hackernews {
    color: #ff4500;
}

.icon-hackernews:hover {
    background-color: #ff4500;
    color: white;
}

/* LinkedIn button */
.icon-linkedin {
    color: #007bb5;
}
.icon-linkedin:hover {
    background-color: #007bb5;
    color: white;
}

</style>


